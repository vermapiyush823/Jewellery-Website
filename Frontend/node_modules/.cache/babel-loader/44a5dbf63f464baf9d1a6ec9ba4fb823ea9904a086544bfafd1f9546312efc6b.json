{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createOrder, fetchAllOrders, updateOrder } from './orderAPI';\nconst initialState = {\n  orders: [],\n  status: 'idle',\n  currentOrder: null,\n  totalOrders: 0\n};\n//we may need more info of current order\n\nexport const createOrderAsync = createAsyncThunk('order/createOrder', async order => {\n  const response = await createOrder(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const updateOrderAsync = createAsyncThunk('order/updateOrder', async order => {\n  const response = await updateOrder(order);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchAllOrdersAsync = createAsyncThunk('order/fetchAllOrders', async _ref => {\n  let {\n    sort,\n    pagination\n  } = _ref;\n  const response = await fetchAllOrders(sort, pagination);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const orderSlice = createSlice({\n  name: 'order',\n  initialState,\n  reducers: {\n    resetOrder: state => {\n      state.currentOrder = null;\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(createOrderAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(createOrderAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.orders.push(action.payload);\n      state.currentOrder = action.payload;\n    }).addCase(fetchAllOrdersAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchAllOrdersAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.orders = action.payload.orders;\n      state.totalOrders = action.payload.totalOrders;\n    }).addCase(updateOrderAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateOrderAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      const index = state.orders.findIndex(order => order.id === action.payload.id);\n      state.orders[index] = action.payload;\n    });\n  }\n});\nexport const {\n  resetOrder\n} = orderSlice.actions;\nexport const selectCurrentOrder = state => state.order.currentOrder;\nexport const selectOrders = state => state.order.orders;\nexport const selectTotalOrders = state => state.order.totalOrders;\nexport const selectStatus = state => state.order.status;\nexport default orderSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","createOrder","fetchAllOrders","updateOrder","initialState","orders","status","currentOrder","totalOrders","createOrderAsync","order","response","data","updateOrderAsync","fetchAllOrdersAsync","_ref","sort","pagination","orderSlice","name","reducers","resetOrder","state","extraReducers","builder","addCase","pending","fulfilled","action","push","payload","index","findIndex","id","actions","selectCurrentOrder","selectOrders","selectTotalOrders","selectStatus","reducer"],"sources":["D:/Study/VS Code/Jewellery Website/Frontend/src/features/order/orderSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { createOrder, fetchAllOrders,updateOrder } from './orderAPI';\n\nconst initialState = {\n  orders: [],\n  status: 'idle',\n  currentOrder: null,\n  totalOrders: 0\n};\n//we may need more info of current order\n\nexport const createOrderAsync = createAsyncThunk(\n  'order/createOrder',\n  async (order) => {\n    const response = await createOrder(order);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\nexport const updateOrderAsync = createAsyncThunk(\n  'order/updateOrder',\n  async (order) => {\n    const response = await updateOrder(order);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const fetchAllOrdersAsync = createAsyncThunk(\n  'order/fetchAllOrders',\n  async ({sort, pagination}) => {\n    const response = await fetchAllOrders(sort,pagination);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const orderSlice = createSlice({\n  name: 'order',\n  initialState,\n  reducers: {\n    resetOrder: (state) => {\n      state.currentOrder = null;\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(createOrderAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(createOrderAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.orders.push(action.payload);\n        state.currentOrder = action.payload;\n      })\n      .addCase(fetchAllOrdersAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchAllOrdersAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.orders = action.payload.orders;\n        state.totalOrders = action.payload.totalOrders;\n      })\n      .addCase(updateOrderAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(updateOrderAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        const index =  state.orders.findIndex(order=>order.id===action.payload.id)\n        state.orders[index] = action.payload;\n      })\n  },\n});\n\nexport const { resetOrder } = orderSlice.actions;\n\nexport const selectCurrentOrder = (state) => state.order.currentOrder;\nexport const selectOrders = (state) => state.order.orders;\nexport const selectTotalOrders = (state) => state.order.totalOrders;\nexport const selectStatus = (state) => state.order.status;\n\nexport default orderSlice.reducer;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}