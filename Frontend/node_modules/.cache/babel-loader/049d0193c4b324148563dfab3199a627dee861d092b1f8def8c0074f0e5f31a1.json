{"ast":null,"code":"export function createOrder(order) {\n  return new Promise(async resolve => {\n    const response = await fetch('/orders', {\n      method: 'POST',\n      body: JSON.stringify(order),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    resolve({\n      data\n    });\n  });\n}\nexport function updateOrder(order) {\n  return new Promise(async resolve => {\n    const response = await fetch('/orders/' + order.id, {\n      method: 'PATCH',\n      body: JSON.stringify(order),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    resolve({\n      data\n    });\n  });\n}\nexport function fetchAllOrders(sort, pagination) {\n  let queryString = '';\n  for (let key in sort) {\n    queryString += `${key}=${sort[key]}&`;\n  }\n  for (let key in pagination) {\n    queryString += `${key}=${pagination[key]}&`;\n  }\n  return new Promise(async resolve => {\n    const response = await fetch('/orders?' + queryString);\n    const data = await response.json();\n    const totalOrders = await response.headers.get('X-Total-Count');\n    resolve({\n      data: {\n        orders: data,\n        totalOrders: +totalOrders\n      }\n    });\n  });\n}","map":{"version":3,"names":["createOrder","order","Promise","resolve","response","fetch","method","body","JSON","stringify","headers","data","json","updateOrder","id","fetchAllOrders","sort","pagination","queryString","key","totalOrders","get","orders"],"sources":["D:/Study/VS Code/Jewellery Website/Frontend/src/features/order/orderAPI.js"],"sourcesContent":["export function createOrder(order) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('/orders', {\n      method: 'POST',\n      body: JSON.stringify(order),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    resolve({ data });\n  });\n}\n\nexport function updateOrder(order) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('/orders/'+order.id, {\n      method: 'PATCH',\n      body: JSON.stringify(order),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    resolve({ data });\n  });\n}\n\nexport function fetchAllOrders(sort, pagination) {\n let queryString = '';\n\n for (let key in sort) {\n  queryString += `${key}=${sort[key]}&`;\n}\n  for (let key in pagination) {\n    queryString += `${key}=${pagination[key]}&`;\n  }\n\n  return new Promise(async (resolve) => {\n    const response = await fetch(\n      '/orders?' + queryString\n    );\n    const data = await response.json();\n    const totalOrders = await response.headers.get('X-Total-Count');\n    resolve({ data: { orders: data, totalOrders: +totalOrders } });\n  });\n}\n"],"mappings":"AAAA,OAAO,SAASA,WAAWA,CAACC,KAAK,EAAE;EACjC,OAAO,IAAIC,OAAO,CAAC,MAAOC,OAAO,IAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,SAAS,EAAE;MACtCC,MAAM,EAAE,MAAM;MACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,KAAK,CAAC;MAC3BS,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;IAClCT,OAAO,CAAC;MAAEQ;IAAK,CAAC,CAAC;EACnB,CAAC,CAAC;AACJ;AAEA,OAAO,SAASE,WAAWA,CAACZ,KAAK,EAAE;EACjC,OAAO,IAAIC,OAAO,CAAC,MAAOC,OAAO,IAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,UAAU,GAACJ,KAAK,CAACa,EAAE,EAAE;MAChDR,MAAM,EAAE,OAAO;MACfC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACR,KAAK,CAAC;MAC3BS,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB;IAChD,CAAC,CAAC;IACF,MAAMC,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;IAClCT,OAAO,CAAC;MAAEQ;IAAK,CAAC,CAAC;EACnB,CAAC,CAAC;AACJ;AAEA,OAAO,SAASI,cAAcA,CAACC,IAAI,EAAEC,UAAU,EAAE;EAChD,IAAIC,WAAW,GAAG,EAAE;EAEpB,KAAK,IAAIC,GAAG,IAAIH,IAAI,EAAE;IACrBE,WAAW,IAAK,GAAEC,GAAI,IAAGH,IAAI,CAACG,GAAG,CAAE,GAAE;EACvC;EACE,KAAK,IAAIA,GAAG,IAAIF,UAAU,EAAE;IAC1BC,WAAW,IAAK,GAAEC,GAAI,IAAGF,UAAU,CAACE,GAAG,CAAE,GAAE;EAC7C;EAEA,OAAO,IAAIjB,OAAO,CAAC,MAAOC,OAAO,IAAK;IACpC,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAC1B,UAAU,GAAGa,WAAW,CACzB;IACD,MAAMP,IAAI,GAAG,MAAMP,QAAQ,CAACQ,IAAI,EAAE;IAClC,MAAMQ,WAAW,GAAG,MAAMhB,QAAQ,CAACM,OAAO,CAACW,GAAG,CAAC,eAAe,CAAC;IAC/DlB,OAAO,CAAC;MAAEQ,IAAI,EAAE;QAAEW,MAAM,EAAEX,IAAI;QAAES,WAAW,EAAE,CAACA;MAAY;IAAE,CAAC,CAAC;EAChE,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}