{"ast":null,"code":"export function createUser(userData) {\n  return new Promise(async resolve => {\n    const response = await fetch('/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n      headers: {\n        'content-type': 'application/json'\n      }\n    });\n    const data = await response.json();\n    resolve({\n      data\n    });\n  });\n}\nexport function loginUser(loginInfo) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(loginInfo),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        resolve({\n          data\n        });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nexport function checkAuth() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/check');\n      if (response.ok) {\n        const data = await response.json();\n        resolve({\n          data\n        });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nexport function signOut(userId) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/logout');\n      if (response.ok) {\n        resolve({\n          data: 'success'\n        });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      console.log(error);\n      reject(error);\n    }\n  });\n}\nexport function resetPasswordRequest(email) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/reset-password-request', {\n        method: 'POST',\n        body: JSON.stringify({\n          email\n        }),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        resolve({\n          data\n        });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nexport function resetPassword(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/reset-password', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: {\n          'content-type': 'application/json'\n        }\n      });\n      if (response.ok) {\n        const data = await response.json();\n        resolve({\n          data\n        });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject(error);\n    }\n  });\n}","map":{"version":3,"names":["createUser","userData","Promise","resolve","response","fetch","method","body","JSON","stringify","headers","data","json","loginUser","loginInfo","reject","ok","error","text","checkAuth","signOut","userId","console","log","resetPasswordRequest","email","resetPassword"],"sources":["D:/Study/VS Code/Jewellery Website/Frontend/src/features/auth/authAPI.js"],"sourcesContent":["\nexport function createUser(userData) {\n  return new Promise(async (resolve) => {\n    const response = await fetch('/auth/signup', {\n      method: 'POST',\n      body: JSON.stringify(userData),\n      headers: { 'content-type': 'application/json' },\n    });\n    const data = await response.json();\n    resolve({ data });\n  });\n}\n\nexport function loginUser(loginInfo) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/login', {\n        method: 'POST',\n        body: JSON.stringify(loginInfo),\n        headers: { 'content-type': 'application/json' },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        resolve({ data });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject( error );\n    }\n\n  });\n}\n\nexport function checkAuth() {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/check');\n      if (response.ok) {\n        const data = await response.json();\n        resolve({ data });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject( error );\n    }\n\n  });\n}\n\n\nexport function signOut(userId) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/logout');\n      if (response.ok) {\n        resolve({ data:'success' });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      console.log(error)\n      reject( error );\n    }\n  });\n}\n\n\nexport function resetPasswordRequest(email) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/reset-password-request', {\n        method: 'POST',\n        body: JSON.stringify({email}),\n        headers: { 'content-type': 'application/json' },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        resolve({ data });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject( error );\n    }\n\n  });\n}\n\nexport function resetPassword(data) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const response = await fetch('/auth/reset-password', {\n        method: 'POST',\n        body: JSON.stringify(data),\n        headers: { 'content-type': 'application/json' },\n      });\n      if (response.ok) {\n        const data = await response.json();\n        resolve({ data });\n      } else {\n        const error = await response.text();\n        reject(error);\n      }\n    } catch (error) {\n      reject( error );\n    }\n\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}