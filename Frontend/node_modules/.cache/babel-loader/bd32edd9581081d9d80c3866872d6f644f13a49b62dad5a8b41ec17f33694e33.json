{"ast":null,"code":"import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport { fetchLoggedInUserOrders, updateUser, fetchLoggedInUser } from './userAPI';\nconst initialState = {\n  status: 'idle',\n  userInfo: null // this info will be used in case of detailed user info, while auth will\n  // only be used for loggedInUser id etc checks\n};\n\nexport const fetchLoggedInUserOrderAsync = createAsyncThunk('user/fetchLoggedInUserOrders', async () => {\n  const response = await fetchLoggedInUserOrders();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const fetchLoggedInUserAsync = createAsyncThunk('user/fetchLoggedInUser', async () => {\n  const response = await fetchLoggedInUser();\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const updateUserAsync = createAsyncThunk('user/updateUser', async update => {\n  // this is name mistake\n  const response = await updateUser(update);\n  // The value we return becomes the `fulfilled` action payload\n  return response.data;\n});\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchLoggedInUserOrderAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchLoggedInUserOrderAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      state.userInfo.orders = action.payload;\n    }).addCase(updateUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(updateUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      // earlier there was loggedInUser variable in other slice\n      state.userInfo = action.payload;\n    }).addCase(fetchLoggedInUserAsync.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchLoggedInUserAsync.fulfilled, (state, action) => {\n      state.status = 'idle';\n      // this info can be different or more from logged-in User info\n      state.userInfo = action.payload;\n    });\n  }\n});\nexport const selectUserOrders = state => state.user.userInfo.orders;\nexport const selectUserInfo = state => state.user.userInfo;\nexport const selectUserInfoStatus = state => state.user.status;\n\n// export const { increment } = userSlice.actions;\n\nexport default userSlice.reducer;","map":{"version":3,"names":["createAsyncThunk","createSlice","fetchLoggedInUserOrders","updateUser","fetchLoggedInUser","initialState","status","userInfo","fetchLoggedInUserOrderAsync","response","data","fetchLoggedInUserAsync","updateUserAsync","update","userSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","orders","payload","selectUserOrders","user","selectUserInfo","selectUserInfoStatus","reducer"],"sources":["D:/Study/VS Code/Jewellery Website/Frontend/src/features/user/userSlice.js"],"sourcesContent":["import { createAsyncThunk, createSlice } from '@reduxjs/toolkit';\nimport {\n  fetchLoggedInUserOrders,\n  updateUser,\n  fetchLoggedInUser,\n} from './userAPI';\n\nconst initialState = {\n  status: 'idle',\n  userInfo: null, // this info will be used in case of detailed user info, while auth will\n  // only be used for loggedInUser id etc checks\n};\n\nexport const fetchLoggedInUserOrderAsync = createAsyncThunk(\n  'user/fetchLoggedInUserOrders',\n  async () => {\n    const response = await fetchLoggedInUserOrders();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const fetchLoggedInUserAsync = createAsyncThunk(\n  'user/fetchLoggedInUser',\n  async () => {\n    const response = await fetchLoggedInUser();\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const updateUserAsync = createAsyncThunk(\n  'user/updateUser',\n  async (update) => {\n    // this is name mistake\n    const response = await updateUser(update);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const userSlice = createSlice({\n  name: 'user',\n  initialState,\n  reducers: {\n   \n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchLoggedInUserOrderAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchLoggedInUserOrderAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.userInfo.orders = action.payload;\n\n      })\n      .addCase(updateUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(updateUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        // earlier there was loggedInUser variable in other slice\n        state.userInfo = action.payload;\n      })\n      .addCase(fetchLoggedInUserAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchLoggedInUserAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        // this info can be different or more from logged-in User info\n        state.userInfo = action.payload;\n      });\n  },\n});\n\nexport const selectUserOrders = (state) => state.user.userInfo.orders;\nexport const selectUserInfo = (state) => state.user.userInfo;\nexport const selectUserInfoStatus = (state) => state.user.status;\n\n// export const { increment } = userSlice.actions;\n\nexport default userSlice.reducer;\n"],"mappings":"AAAA,SAASA,gBAAgB,EAAEC,WAAW,QAAQ,kBAAkB;AAChE,SACEC,uBAAuB,EACvBC,UAAU,EACVC,iBAAiB,QACZ,WAAW;AAElB,MAAMC,YAAY,GAAG;EACnBC,MAAM,EAAE,MAAM;EACdC,QAAQ,EAAE,IAAI,CAAE;EAChB;AACF,CAAC;;AAED,OAAO,MAAMC,2BAA2B,GAAGR,gBAAgB,CACzD,8BAA8B,EAC9B,YAAY;EACV,MAAMS,QAAQ,GAAG,MAAMP,uBAAuB,EAAE;EAChD;EACA,OAAOO,QAAQ,CAACC,IAAI;AACtB,CAAC,CACF;AAED,OAAO,MAAMC,sBAAsB,GAAGX,gBAAgB,CACpD,wBAAwB,EACxB,YAAY;EACV,MAAMS,QAAQ,GAAG,MAAML,iBAAiB,EAAE;EAC1C;EACA,OAAOK,QAAQ,CAACC,IAAI;AACtB,CAAC,CACF;AAED,OAAO,MAAME,eAAe,GAAGZ,gBAAgB,CAC7C,iBAAiB,EACjB,MAAOa,MAAM,IAAK;EAChB;EACA,MAAMJ,QAAQ,GAAG,MAAMN,UAAU,CAACU,MAAM,CAAC;EACzC;EACA,OAAOJ,QAAQ,CAACC,IAAI;AACtB,CAAC,CACF;AAED,OAAO,MAAMI,SAAS,GAAGb,WAAW,CAAC;EACnCc,IAAI,EAAE,MAAM;EACZV,YAAY;EACZW,QAAQ,EAAE,CAEV,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAACX,2BAA2B,CAACY,OAAO,EAAGC,KAAK,IAAK;MACvDA,KAAK,CAACf,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDa,OAAO,CAACX,2BAA2B,CAACc,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACjEF,KAAK,CAACf,MAAM,GAAG,MAAM;MACrBe,KAAK,CAACd,QAAQ,CAACiB,MAAM,GAAGD,MAAM,CAACE,OAAO;IAExC,CAAC,CAAC,CACDN,OAAO,CAACP,eAAe,CAACQ,OAAO,EAAGC,KAAK,IAAK;MAC3CA,KAAK,CAACf,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDa,OAAO,CAACP,eAAe,CAACU,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACrDF,KAAK,CAACf,MAAM,GAAG,MAAM;MACrB;MACAe,KAAK,CAACd,QAAQ,GAAGgB,MAAM,CAACE,OAAO;IACjC,CAAC,CAAC,CACDN,OAAO,CAACR,sBAAsB,CAACS,OAAO,EAAGC,KAAK,IAAK;MAClDA,KAAK,CAACf,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDa,OAAO,CAACR,sBAAsB,CAACW,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC5DF,KAAK,CAACf,MAAM,GAAG,MAAM;MACrB;MACAe,KAAK,CAACd,QAAQ,GAAGgB,MAAM,CAACE,OAAO;IACjC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,gBAAgB,GAAIL,KAAK,IAAKA,KAAK,CAACM,IAAI,CAACpB,QAAQ,CAACiB,MAAM;AACrE,OAAO,MAAMI,cAAc,GAAIP,KAAK,IAAKA,KAAK,CAACM,IAAI,CAACpB,QAAQ;AAC5D,OAAO,MAAMsB,oBAAoB,GAAIR,KAAK,IAAKA,KAAK,CAACM,IAAI,CAACrB,MAAM;;AAEhE;;AAEA,eAAeQ,SAAS,CAACgB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}